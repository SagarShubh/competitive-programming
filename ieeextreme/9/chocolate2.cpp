#include <bits/stdc++.h>

using namespace std;

const int base = 1000000000;
const int base_digits = 9; 
struct bigint {
  vector<int> a;
  int sign;
  int size(){
    if(a.empty())return 0;
    int ans=(a.size()-1)*base_digits;
    int ca=a.back();
    while(ca)
      ans++,ca/=10;
    return ans;
  }
  bigint operator ^(const bigint &v){
    bigint ans=1,a=*this,b=v;
    while(!b.isZero()){
      if(b%2)
  ans*=a;
      a*=a,b/=2;
    }
    return ans;
  }
  bigint() :
    sign(1) {
  }
 
  bigint(long long v) {
    *this = v;
  }
 
  bigint(const string &s) {
    read(s);
  }
 
  void operator=(const bigint &v) {
    sign = v.sign;
    a = v.a;
  }
 
  void operator=(long long v) {
    sign = 1;
    if (v < 0)
      sign = -1, v = -v;
    for (; v > 0; v = v / base)
      a.push_back(v % base);
  }
 
  bigint operator+(const bigint &v) const {
    if (sign == v.sign) {
      bigint res = v;
 
      for (int i = 0, carry = 0; i < (int) max(a.size(), v.a.size()) || carry; ++i) {
  if (i == (int) res.a.size())
    res.a.push_back(0);
  res.a[i] += carry + (i < (int) a.size() ? a[i] : 0);
  carry = res.a[i] >= base;
  if (carry)
    res.a[i] -= base;
      }
      return res;
    }
    return *this - (-v);
  }
 
  bigint operator-(const bigint &v) const {
    if (sign == v.sign) {
      if (abs() >= v.abs()) {
  bigint res = *this;
  for (int i = 0, carry = 0; i < (int) v.a.size() || carry; ++i) {
    res.a[i] -= carry + (i < (int) v.a.size() ? v.a[i] : 0);
    carry = res.a[i] < 0;
    if (carry)
      res.a[i] += base;
  }
  res.trim();
  return res;
      }
      return -(v - *this);
    }
    return *this + (-v);
  }
 
  void operator*=(int v) {
    if (v < 0)
      sign = -sign, v = -v;
    for (int i = 0, carry = 0; i < (int) a.size() || carry; ++i) {
      if (i == (int) a.size())
  a.push_back(0);
      long long cur = a[i] * (long long) v + carry;
      carry = (int) (cur / base);
      a[i] = (int) (cur % base);
    }
    trim();
  }
 
  bigint operator*(int v) const {
    bigint res = *this;
    res *= v;
    return res;
  }
 
  friend pair<bigint, bigint> divmod(const bigint &a1, const bigint &b1) {
    int norm = base / (b1.a.back() + 1);
    bigint a = a1.abs() * norm;
    bigint b = b1.abs() * norm;
    bigint q, r;
    q.a.resize(a.a.size());
 
    for (int i = a.a.size() - 1; i >= 0; i--) {
      r *= base;
      r += a.a[i];
      int s1 = r.a.size() <= b.a.size() ? 0 : r.a[b.a.size()];
      int s2 = r.a.size() <= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];
      int d = ((long long) base * s1 + s2) / b.a.back();
      r -= b * d;
      while (r < 0)
  r += b, --d;
      q.a[i] = d;
    }
 
    q.sign = a1.sign * b1.sign;
    r.sign = a1.sign;
    q.trim();
    r.trim();
    return make_pair(q, r / norm);
  }
 
  bigint operator/(const bigint &v) const {
    return divmod(*this, v).first;
  }
 
  bigint operator%(const bigint &v) const {
    return divmod(*this, v).second;
  }
 
  void operator/=(int v) {
    if (v < 0)
      sign = -sign, v = -v;
    for (int i = (int) a.size() - 1, rem = 0; i >= 0; --i) {
      long long cur = a[i] + rem * (long long) base;
      a[i] = (int) (cur / v);
      rem = (int) (cur % v);
    }
    trim();
  }
 
  bigint operator/(int v) const {
    bigint res = *this;
    res /= v;
    return res;
  }
 
  int operator%(int v) const {
    if (v < 0)
      v = -v;
    int m = 0;
    for (int i = a.size() - 1; i >= 0; --i)
      m = (a[i] + m * (long long) base) % v;
    return m * sign;
  }
 
  void operator+=(const bigint &v) {
    *this = *this + v;
  }
  void operator-=(const bigint &v) {
    *this = *this - v;
  }
  void operator*=(const bigint &v) {
    *this = *this * v;
  }
  void operator/=(const bigint &v) {
    *this = *this / v;
  }
 
  bool operator<(const bigint &v) const {
    if (sign != v.sign)
      return sign < v.sign;
    if (a.size() != v.a.size())
      return a.size() * sign < v.a.size() * v.sign;
    for (int i = a.size() - 1; i >= 0; i--)
      if (a[i] != v.a[i])
  return a[i] * sign < v.a[i] * sign;
    return false;
  }
 
  bool operator>(const bigint &v) const {
    return v < *this;
  }
  bool operator<=(const bigint &v) const {
    return !(v < *this);
  }
  bool operator>=(const bigint &v) const {
    return !(*this < v);
  }
  bool operator==(const bigint &v) const {
    return !(*this < v) && !(v < *this);
  }
  bool operator!=(const bigint &v) const {
    return *this < v || v < *this;
  }
 
  void trim() {
    while (!a.empty() && !a.back())
      a.pop_back();
    if (a.empty())
      sign = 1;
  }
 
  bool isZero() const {
    return a.empty() || (a.size() == 1 && !a[0]);
  }
 
  bigint operator-() const {
    bigint res = *this;
    res.sign = -sign;
    return res;
  }
 
  bigint abs() const {
    bigint res = *this;
    res.sign *= res.sign;
    return res;
  }
 
  long long longValue() const {
    long long res = 0;
    for (int i = a.size() - 1; i >= 0; i--)
      res = res * base + a[i];
    return res * sign;
  }
 
  friend bigint gcd(const bigint &a, const bigint &b) {
    return b.isZero() ? a : gcd(b, a % b);
  }
  friend bigint lcm(const bigint &a, const bigint &b) {
    return a / gcd(a, b) * b;
  }
 
  void read(const string &s) {
    sign = 1;
    a.clear();
    int pos = 0;
    while (pos < (int) s.size() && (s[pos] == '-' || s[pos] == '+')) {
      if (s[pos] == '-')
  sign = -sign;
      ++pos;
    }
    for (int i = s.size() - 1; i >= pos; i -= base_digits) {
      int x = 0;
      for (int j = max(pos, i - base_digits + 1); j <= i; j++)
  x = x * 10 + s[j] - '0';
      a.push_back(x);
    }
    trim();
  }
 
  friend istream& operator>>(istream &stream, bigint &v) {
    string s;
    stream >> s;
    v.read(s);
    return stream;
  }
 
  friend ostream& operator<<(ostream &stream, const bigint &v) {
    if (v.sign == -1)
      stream << '-';
    stream << (v.a.empty() ? 0 : v.a.back());
    for (int i = (int) v.a.size() - 2; i >= 0; --i)
      stream << setw(base_digits) << setfill('0') << v.a[i];
    return stream;
  }
 
  static vector<int> convert_base(const vector<int> &a, int old_digits, int new_digits) {
    vector<long long> p(max(old_digits, new_digits) + 1);
    p[0] = 1;
    for (int i = 1; i < (int) p.size(); i++)
      p[i] = p[i - 1] * 10;
    vector<int> res;
    long long cur = 0;
    int cur_digits = 0;
    for (int i = 0; i < (int) a.size(); i++) {
      cur += a[i] * p[cur_digits];
      cur_digits += old_digits;
      while (cur_digits >= new_digits) {
  res.push_back(int(cur % p[new_digits]));
  cur /= p[new_digits];
  cur_digits -= new_digits;
      }
    }
    res.push_back((int) cur);
    while (!res.empty() && !res.back())
      res.pop_back();
    return res;
  }
 
  typedef vector<long long> vll;
 
  static vll karatsubaMultiply(const vll &a, const vll &b) {
    int n = a.size();
    vll res(n + n);
    if (n <= 32) {
      for (int i = 0; i < n; i++)
  for (int j = 0; j < n; j++)
    res[i + j] += a[i] * b[j];
      return res;
    }
 
    int k = n >> 1;
    vll a1(a.begin(), a.begin() + k);
    vll a2(a.begin() + k, a.end());
    vll b1(b.begin(), b.begin() + k);
    vll b2(b.begin() + k, b.end());
 
    vll a1b1 = karatsubaMultiply(a1, b1);
    vll a2b2 = karatsubaMultiply(a2, b2);
 
    for (int i = 0; i < k; i++)
      a2[i] += a1[i];
    for (int i = 0; i < k; i++)
      b2[i] += b1[i];
 
    vll r = karatsubaMultiply(a2, b2);
    for (int i = 0; i < (int) a1b1.size(); i++)
      r[i] -= a1b1[i];
    for (int i = 0; i < (int) a2b2.size(); i++)
      r[i] -= a2b2[i];
 
    for (int i = 0; i < (int) r.size(); i++)
      res[i + k] += r[i];
    for (int i = 0; i < (int) a1b1.size(); i++)
      res[i] += a1b1[i];
    for (int i = 0; i < (int) a2b2.size(); i++)
      res[i + n] += a2b2[i];
    return res;
  }
 
  bigint operator*(const bigint &v) const {
    vector<int> a6 = convert_base(this->a, base_digits, 6);
    vector<int> b6 = convert_base(v.a, base_digits, 6);
    vll a(a6.begin(), a6.end());
    vll b(b6.begin(), b6.end());
    while (a.size() < b.size())
      a.push_back(0);
    while (b.size() < a.size())
      b.push_back(0);
    while (a.size() & (a.size() - 1))
      a.push_back(0), b.push_back(0);
    vll c = karatsubaMultiply(a, b);
    bigint res;
    res.sign = sign * v.sign;
    for (int i = 0, carry = 0; i < (int) c.size(); i++) {
      long long cur = c[i] + carry;
      res.a.push_back((int) (cur % 1000000));
      carry = (int) (cur / 1000000);
    }
    res.a = convert_base(res.a, 6, base_digits);
    res.trim();
    return res;
  }
};


map< vector<int>, bigint > dp;
vector<int> st;

void generate(int id, int n, int last) {
  if (id >= n) {
    vector<int> next = st;
    for (int i = n-1; i >= 0; i--) {
      for (int j = st[i]-1; j >= 0; j--) {
        int cur = j;
        for (int k = i; k < n; k++) {
          cur = min(cur, st[k]);
          next[k] = cur;
        }
        dp[next] += dp[st];
      }
    }
    return;
  }
  for (int i = last; i >= 0; i--) {
    st[id] = i;
    generate(id + 1, n, i);
  }
}

string ans[][100] = {
{"1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024", "2048", "4096", "8192", "16384", "32768", "65536", "131072", "262144", "524288", "1048576", "2097152", "4194304", "8388608", "16777216", "33554432", "67108864", "134217728", "268435456", "536870912", "1073741824", "2147483648", "4294967296", "8589934592", "17179869184", "34359738368", "68719476736", "137438953472", "274877906944", "549755813888", "1099511627776", "2199023255552", "4398046511104", "8796093022208", "17592186044416", "35184372088832", "70368744177664", "140737488355328", "281474976710656", "562949953421312", "1125899906842624", "2251799813685248", "4503599627370496", "9007199254740992", "18014398509481984", "36028797018963968", "72057594037927936", "144115188075855872", "288230376151711744", "576460752303423488", "1152921504606846976", "2305843009213693952", "4611686018427387904", "9223372036854775808", "18446744073709551616", "36893488147419103232", "73786976294838206464", "147573952589676412928", "295147905179352825856", "590295810358705651712", "1180591620717411303424", "2361183241434822606848", "4722366482869645213696", "9444732965739290427392", "18889465931478580854784", "37778931862957161709568", "75557863725914323419136", "151115727451828646838272", "302231454903657293676544", "604462909807314587353088", "1208925819614629174706176", "2417851639229258349412352", "4835703278458516698824704", "9671406556917033397649408", "19342813113834066795298816", "38685626227668133590597632", "77371252455336267181195264", "154742504910672534362390528", "309485009821345068724781056", "618970019642690137449562112", "1237940039285380274899124224", "2475880078570760549798248448", "4951760157141521099596496896", "9903520314283042199192993792", "19807040628566084398385987584", "39614081257132168796771975168", "79228162514264337593543950336", "158456325028528675187087900672", "316912650057057350374175801344", "633825300114114700748351602688", },
{"2", "10", "58", "370", "2514", "17850", "130890", "983650", "7536418", "58648810", "462306266", "3683602130", "29620138994", "240059315610", "1958940281322", "16081662931650", "132723191430210", "1100568370427850", "9164925012016506", "76612776253995570", "642655316137012242", "5407851880162540410", "45637700761944844938", "386164200271394222370", "3275508654183423137634", "27846045909561175854250", "237221882815801478407450", "2024829070052003152143250", "17314378914686037970260530", "148305963038041174415701850", "1272320807183421946454720810", "10931468007348690789121138050", "94051458740710287747161845890", "810256454057757812800923731850", "6989033150109319165428100534970", "60355899820192821973240352107250", "521798894528577486397970443437650", "4515878818114720078972026723240250", "39121357827403773185842653269568970", "339231848439737954668278412247111650", "2944221476682741601248142515772893090", "25575080171744932577613928270623033450", "222340712456719652150576248333967992410", "1934462880305632537136946736421790445650", "16843263609027303774862354121792415983730", "146758247691625377294811493995585537364250", "1279605487811452966943085235179611383353450", "11164381472777699042814561799921285604573250", "97469037859058788614962748369616958061190338", "851454136156747732900209210694007820766932810", "7442317174294474602603982295566785980429156346", "65087527990398451708225598818954552086337655730", "569535715036259690818948361227518242227968268434", "4986193535361681076157959872899118713010127286010", "43675123941068219892597317186151669590138901907722", "382743925072054123462784956843600086456213485926050", "3355709160601410532924790148439465041390376950067170", "29434403883211792850957808764466406020771782192913450", "258294124538172920240331679684390032598637153457831834", "2267545004478300519258973331756731236940102229552608530", "19914686251283903121033270061296956307078798716019668658", "174969170509862192683105007754745924776282635022122025690", "1537852637761078243960833821610377718321724787402054186922", "13521594274365870483045490498391409617063531225507081820930", "118931300929628107533917402948626894495720601302956106825986", "1046441250848830881141517856780256178436841789067823445405450", "9210420893685883721349524912263582726183871146586371598550330", "81093449278750231427722720418122408263516362336804546412328050", "714216127957876009200232856633127275380283341418850460264555218", "6292267858762375841695711696677923134253871951210939260274945210", "55451675346744916203918501974843941272747552369202861703743716426", "488819440026059154870320966343922279937459734448180197043884133730", "4310276668544903862522686186992140195694224615013648840920591380514", "38017311389914906754642751483311485419143749121501481738562636613610", "335408489661218469664887434608068691166986677940192586930846522896602", "2959920523487488528550622605729953409635392271817213198635148166263250", "26127416281366746888684965064397025536325116414494078215097012105592050", "230685594683465654243066102058081096942548821611518187200427127039364250", "2037273654294167287336852616574581530040343991122467259365913316709070570", "17996188490074939557458832426321226991708693829272539552854336340766387650", "159005245930575285395827535278098295859351389693613659983397273001668205890", "1405205056874275917063000986803600333630615940279745836245947654590455285450", "12421182709974860101469256439229007351949892710049356628273930988320351052410", "109819367421832853622756875276413695207750186458408945381873211837173377977650", "971148162640669079249209593586808185565608577941263830771653925048095373894930", "8589749853872027878382413848364968334270530956060039225299631698473775527920250", "75990969081581730331535711815247606218026349032578035219816660983159350802515850", "672400354600978252384559095727046853371322072399048432100647903658940783074057250", "5950815389233191761230470415189973217387837808673880675910632768759431348246341730", "52675150467249800553985716678892361776835469861792053260618716355404505016327719850", "466352261370492205441428986867721944140309153697543801950603494063747527498165942810", "4129520938446537951937409596495298557517700484357000168211839105596250952662326716050", "36573025170219303077506101452271137164393188842041880657429860755726839427570790480690", "323963528390750683718568733810267432032452374381700655530710705549167358694466132405850", "2870144919393602494147654651407831056917399945103313180898466909285622805889518161366570", "25432116010333147458609289106092705276872806586048920960608810736836847362566716454533250", "225387939223366909847568563881895561617529402066059958748156256669472961284095340312818050", "1997776692018736340375160848456404800180535981051133253227134725011203041724599129174554250", "17710463706964559829726060794606639028857247733316959104415872920635851008977149101438457786", "157028439069992193845213253686089671286670581775874007718291690381908818526051157663359491570", },
{"4", "58", "1232", "33096", "1036972", "36191226", "1367845160", "54960609724", "2318043145512", "101690266003248", "4608729612937728", "214675705646896216", "10236104433450243036", "498019354556296746570", "24660067518838341248168", "1240105333397721918702964", "63223094249799868474926504", "3262912952698163935521953212", "170257211620113264550085594128", "8972480711620478404655974122544", "477119972438047598987977937247688", "25580246886967119388401192828172480", "1381789708472156543114885188241304064", "75157809587052272273259287776448306368", "4114027078717037077039779098576799187824", "226523564087445348058053701101006790593152", "12540872471544850040582356392888686365272208", "697821873586575425905894344605081698071677656", "39013507636572392243683631557363841364475773436", "2190810143596797126159021868645635416497146792266", "123535646768330636982173161291673360942935879295144", "6993061009934494576191469746293145869094544500411764", "397309854010080071523089952587683240690528402157598168", "22650958662210035203811523929488606362536314475081700996", "1295552574491531445386732064652703466909298755051120173616", "74328875076016753102102287521083217593763070989093347365088", "4276841544930612095677482842066510669551562157616251951562552", "246766600221661782733931611460378832209566350050984199180306604", "14275348173247960905369988416822096240971616765968418855480630320", "827881396778116397713297651775155558396831244083548581671524406680", "48125874144767985121585553636983600384512805319341945780697537396416", "2803947667531661919397172248608908154986162318594750962397162364681504", "163718192306192020487846644909308950348103491836094571060044999828567392", "9578946957295327976658336344817201923215139282431472013337291211475231024", "561556133750080230578124779888634677113548899018259121002446252963444030472", "32982720539268451997127476102702277002675129545034027486381048712410916996832", "1940721842770791664474754609679336416083557410056960348909723670328455849849888", "114390874578545959694626143442400245707382181947402112097481726543189768020399920", "6753679304119305852165043760942233248526726956701393451328066385686245615339462560", "399375990593349324763841548025904198072305620744525212984667583072404149263927750688", "23653155628991125011732436899852308364618865692362906518759806337878214524873542508096", "1402931704740542825411489883525255450698846967427130179860446921612980548998573367282208", "83329807279060261946542150563856627643504469014845152443462252675515094883404705479558576", "4956305272537792130644687824530755869893643275843420377487260552817729338622138214840771808", "295180848245179684380967925224573803777309219574022783065606881286133764207072332479005217792", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
{"8", "370", "33096", "4418360", "768194656", "161014977260", "38790483305658", "10407922652792632", "3042807536024136644", "954072421398184899090", "317067891302456544653602", "110676210759548946038311672", "40290899969376128272299769134", "15210817187951314454381962024444", "5927869224388537427902363741048380", "2375787467762001213933978592573431066", "976151321573300185110375693487117416438", "410092474116832089395352723644908974147494", "175763693616747380529353244549597728067051250", "76705549143436766855701312569183794110325470902", "34029568634706417171558388564015823167393783363286", "15324779446188644135824552212140056477205956845164174", "6996723214865465193814196800555663547226368013122892100", "3235029187854761014236477545013899228923520125615787653950", "1513285198705471567206245354945259376018583041586432599662030", "715559606230556109307493619785671462937247954643659587204797058", "341756855913195383948517610680763625848251607618484958428346433556", "164753220105012172765186619827364550202273683251479548543436835092292", "80117053279314062213091808493407084897653949048830586879505658231066240", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
{"16", "2514", "1036972", "768194656", "840254670736", "1213757769879808", "2160006445166333200", "4521641835507466919200", "10779665455044020730435496", "28586655359437301612141960636", "82851882802108612503007257743384", "258892735257247545940803654479144538", "862927601167178254997050955278241378512", "3041932432862170126833927598435930600003992", "11262203467202487985023165401971345290188942536", "43541648754772111081067754974944064851129616285876", "174951066596343514566922964560390110204077366728074376", "727625151008038538007636543726429719493590764148840985160", "3121683353231447914001707968607142353862034098664069969073892", "13774711967091260396097155004014080857033124950414458434191187258", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
{"32", "17850", "36191226", "161014977260", "1213757769879808", "13367266491668337972", "195986631322548409244008", "3594522956978391562109687442", "78933202688812393097772053203960", "2009890644815416287031679299740625710", "57928960699814547845447364825230538522724", "1854931440046715810176925257761224400721937368", "65024293701038702300701413793066567532075128299810", "2466062874911304964866604060191390918749550397645309764", "100213417955058319513418189606403481391085979400268718704108", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
{"64", "130890", "1367845160", "38790483305658", "2160006445166333200", "195986631322548409244008", "25758199311854010060824602768", "4529867464208222948964489764012222", "1007825920578345496435726767901714244052", "272229990862202721592348155251598763209569736", "86538239941532473839591704317293101490264475805296", "31601685553622237130431243329994561381339379081254047964", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
{"128", "983650", "54960609724", "10407922652792632", "4521641835507466919200", "3594522956978391562109687442", "4529867464208222948964489764012222", "8212034460743870929963911348360791316316", "19988605083980584682610392794731180316779656612", "62087098392571012256085434285060395843726973172881630", "236778922368721723802379506392962635887883549441853786182084", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
{"256", "7536418", "2318043145512", "3042807536024136644", "10779665455044020730435496", "78933202688812393097772053203960", "1007825920578345496435726767901714244052", "19988605083980584682610392794731180316779656612", "567103890437783240805816488052030878213396560632375456", "21654910795836441786808477060240229499663178636880107787531802", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
{"512", "58648810", "101690266003248", "954072421398184899090", "28586655359437301612141960636", "2009890644815416287031679299740625710", "272229990862202721592348155251598763209569736", "62087098392571012256085434285060395843726973172881630", "21654910795836441786808477060240229499663178636880107787531802", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
};


int main() {
  bigint b(10);
  b = b ^ bigint(138);
  cout << "{" << endl;
  vector<int> vend;
  for (int n = 1; n <= 10; n++) {
    cout << "{";
    st.resize(n);
    bool ok = 1;
    for (int m = 1; m <= 100; m++) {
      if (ans[n-1][m-1] != "0") {
        cout << "\"" << ans[n-1][m-1] << "\", ";
        cerr << n << " " << m << endl;
        continue;  
      }
      time_t startt = clock();
      dp.clear();
      for (int i = 0; i < n; i++)
        st[i] = m;
      dp[st] = 1;
      // cerr << n << " " << m << endl;
      if (ok)
        generate(0, n, m);
      for (int i = 0; i < n; i++)
        st[i] = 0;
      if (dp[st] > b || (clock() - startt) * 1000.0 / CLOCKS_PER_SEC > 60000) {
        if (ok)
          vend.push_back(m);
        ok = 0;
      }
      cout << "\"" << dp[st] << "\", ";
      cerr << n << " " << m << endl;
    }
    if (vend.size() < n)
      vend.push_back(100);
    cout << "}," << endl;
  }
  cout << "}" << endl;
  cerr << "{";
  for (int x : vend)
    cerr << x << ",";
  cerr << "};";
  return 0;
}
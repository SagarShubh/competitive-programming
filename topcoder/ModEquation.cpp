#include <bits/stdc++.h>

using namespace std;

const int mod = 1e9 + 7;

class ModEquation {
public:
	long long dp[55][10000];
	int cnt[10000], ff[10000];
	vector< int > f;
	long long gcd(long long a, long long b) {
		return a ? gcd(b % a, a) : b;
	}
	long long powmod(long long b, long long p) {
		long long ret = 1;
		while (p) {
			if (p&1)
				ret = (ret * b) % mod;
			b = b * b % mod;
			p >>= 1;
		}
		return ret;
	}
	vector <int> count(int n, int K, vector <int> query) {
		memset(dp, 0, sizeof dp);
		for (long long i = 1; i * i <= K; i++) if ((K % i) == 0) {
			f.push_back(i);
			if (i * i != K)
				f.push_back(K/i);
		}
		sort(f.begin(), f.end());
		for (int i = 0; i < f.size(); i++)
			cnt[i] = K/f[i];
		for (int i = (int)f.size()-1; i >= 0; i--) {
			for (int j = 0; j < i; j++) if ((f[i] % f[j]) == 0)
				cnt[j] -= cnt[i];
		}
		dp[0][0] = 1;
		vector< pair< int, long long > > to[10000];
		long long sum[10000];
		memset(sum, 0, sizeof sum);
		for (int i = 0; i < f.size(); i++) {
			for (int j = 0; j < f.size(); j++)
				sum[j] = 0;
			for (int j = 0; j < f.size(); j++) {
				long long d = gcd((1LL * f[i] * f[j]) % K, K);
				int id = lower_bound(f.begin(), f.end(), d) - f.begin();
				sum[id] += cnt[j];
				if (sum[id] >= mod)
					sum[id] -= mod;
			}
			for (int j = 0; j < f.size(); j++) if (sum[j])
				to[i].push_back(make_pair(j, sum[j]));
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < f.size(); j++) {
				for (auto it : to[j]) {
					dp[i+1][it.first] = (dp[i+1][it.first] + dp[i][j] * it.second) % mod;
				}
			}
		}
		vector< int > ans;
		for (int v : query) {
			int d = gcd(v, K);
			int id = lower_bound(f.begin(), f.end(), d) - f.begin();
			int cur = (dp[n][id] * powmod(cnt[id], mod-2)) % mod;
			ans.push_back(cur);
		}
		return ans;
	}
};

// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	if (argc == 1) 
	{
		cout << "Testing ModEquation (500.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1483060794;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 500.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		ModEquation _obj;
		vector <int> _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				int n = 2;
				int K = 2;
				int query[] = {0,1};
				int __expected[] = {3, 1 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.count(n, K, vector <int>(query, query+sizeof(query)/sizeof(int))); break;
			}
			case 1:
			{
				int n = 2;
				int K = 4;
				int query[] = {0,1,2,3};
				int __expected[] = {8, 2, 4, 2 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.count(n, K, vector <int>(query, query+sizeof(query)/sizeof(int))); break;
			}
			case 2:
			{
				int n = 6;
				int K = 6;
				int query[] = {4};
				int __expected[] = {2016 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.count(n, K, vector <int>(query, query+sizeof(query)/sizeof(int))); break;
			}
			case 3:
			{
				int n = 1;
				int K = 2;
				int query[] = {0,0,0,1,1,1};
				int __expected[] = {1, 1, 1, 1, 1, 1 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.count(n, K, vector <int>(query, query+sizeof(query)/sizeof(int))); break;
			}
			case 4:
			{
				int n = 50;
				int K = 931170240;
				int query[] = {};
				int __expected[] = {185422162, 284971463, 248573052, 248573052, 338612784, 489795299, 428652516, 990099617, 869288221, 418560186, 489764782, 726753547, 930639088, 391324527, 504980507, 489764782, 768068853, 857367656, 928009160, 145007081, 489001857, 504980507, 337677098, 284971463, 464410749, 489795299, 566226217, 418560186, 377002841, 284971463, 488238932, 284971463, 95143555, 337677098, 868382506, 807541628, 664233419, 284971463, 250354001, 566226217, 476032132, 284971463, 249025175, 284971463, 610765943, 585955946, 248573052, 284971463, 403442384, 990099617, 489764782, 868382506, 938768439, 284971463, 928009160, 603617600, 201382533, 250354001, 248573052, 284971463, 450092682, 284971463, 248573052, 561622474, 318375630, 556035130, 883854788, 284971463, 143753749, 248573052, 377081120, 284971463, 180045850, 284971463, 248573052, 489764782, 884026987, 260898601, 311310654, 284971463, 307425707, 418560186, 248573052, 284971463, 850141924, 438726773, 248573052, 248573052, 253276273, 284971463, 297797097, 796163001, 338612784, 248573052, 248573052, 190750119, 757177722, 284971463, 504980507, 403746906, 489001857, 284971463, 419124999, 284971463, 271986164, 377081120, 248573052, 284971463, 664233419, 284971463, 180879790, 248573052, 918318550, 284971463, 517699966, 489795299, 338612784, 473195155, 248573052, 358526761, 801606439, 726753547, 248573052, 248573052, 338612784, 489795299, 81123504, 284971463, 318375630, 248573052, 801756311, 284971463, 538296940, 474303307, 248573052, 585955946, 825064971, 284971463, 428652516, 284971463, 615568497, 248573052, 248573052, 149142619, 885607502, 489795299, 248573052, 504980507, 338612784, 284971463, 488238932, 284971463, 656467672, 778654309, 44929959, 489795299, 938421628, 284971463, 248573052, 248573052, 520197616, 990099617, 928009160, 284971463, 338612784, 180879790, 248573052, 284971463, 69126580, 391324527, 936338503, 584305975, 338612784, 284971463, 428652516, 807541628, 605910598, 248573052, 248573052, 284971463, 93825921, 284971463, 808149777, 248573052, 869288221, 489795299, 428652516, 880811527, 338612784, 561622474, 537505887, 284971463, 918781395, 284971463, 248573052, 801756311, 377002841, 284971463, 187345160, 284971463, 476032132, 248573052, 248573052, 990099617, 187687401, 489795299, 248573052, 418560186, 603816652, 911833651, 854055874, 284971463, 338612784, 248573052, 248573052, 489795299, 180045850, 990099617, 248573052, 248573052, 612434617, 835714237, 428652516, 284971463, 917840277, 585955946, 248573052, 284971463, 201349042, 284971463, 489764782, 44929959, 869288221, 284971463, 659757589, 489795299, 338612784, 248573052, 926337931, 284971463, 371285245, 284971463, 337677098, 418560186, 338612784, 807541628, 428652516, 454273121, 869288221, 248573052, 489764782, 284971463, 68649338, 726753547, 248573052, 936338503, 318375630, 284971463, 428652516, 990099617, 944785794, 418560186, 248573052, 284971463, 663813566, 489795299, 715165189, 248573052, 338612784, 284971463, 297797097, 284971463, 682110794, 808149777, 248573052, 603617600, 930639088, 284971463, 248573052, 418560186, 669853878, 284971463, 428652516, 284971463, 338612784, 537505887, 457130901, 990099617, 764560960, 857367656, 489764782, 248573052, 338612784, 284971463, 249025175, 489795299, 869288221, 403746906, 248573052, 391324527, 450092682, 990099617, 248573052, 248573052, 698196598, 489795299, 932715184, 284971463, 645713951, 248573052, 489764782, 284971463, 599308109, 284971463, 248573052, 496327138, 338612784, 284971463, 428652516, 726753547, 921001829, 248573052, 504980507, 938888706, 664233419, 556035130, 248573052, 248573052, 869288221, 990099617, 43989437, 284971463, 338612784, 418560186, 248573052, 489795299, 915927185, 284971463, 566226217, 248573052, 376631662, 726753547, 215298547, 990099617, 869288221, 489764782, 248573052, 284971463, 930639088, 284971463, 377081120, 473195155, 343834415, 284971463, 428652516, 489795299, 338612784, 926337931, 248573052, 284971463, 626315957, 145007081, 248573052, 337677098, 107819170, 489795299, 428652516, 284971463, 768068853, 418560186, 489764782, 990099617, 930639088, 284971463, 40576042, 489764782, 869288221, 391324527, 81123504, 284971463, 206400024, 248573052, 248573052, 284971463, 918781395, 391713307, 248573052, 418560186, 338612784, 284971463, 87815270, 857367656, 201382533, 248573052, 248573052, 489795299, 777301552, 284971463, 248573052, 715165189, 307425707, 284971463, 428652516, 391324527, 338612784, 585955946, 504980507, 726753547, 253248263, 284971463, 489764782, 248573052, 338612784, 990099617, 928009160, 489795299, 721219801, 248573052, 591682235, 284971463, 778424640, 284971463, 248573052, 418560186, 869288221, 438726773, 428652516, 990099617, 338612784, 457130901, 489764782, 284971463, 885607502, 284971463, 504980507, 489764782, 338612784, 145007081, 428652516, 284971463, 948866627, 561622474, 785711563, 284971463, 930639088, 489795299, 248573052, 248573052, 956498525, 284971463, 297797097, 726753547, 338612784, 248573052, 248573052, 703078623, 823383376, 284971463, 248573052, 778654309, 489001857, 284971463, 246497936, 284971463, 768068853, 489764782, 248573052, 284971463, 323818404, 990099617, 489764782, 248573052, 869288221, 726753547, 428652516, 190750119, 121617076, 418560186, 248573052, 284971463, 9880618, 391324527, 248573052, 504980507, 610765943, 489795299, 928009160, 284971463, 869288221, 248573052, 377081120, 284971463, 930639088, 857367656, 713655896, 903812130, 768068853, 990099617, 428652516, 284971463, 489001857, 248573052, 248573052, 284971463, 856588523, 489795299, 337677098, 566226217, 338612784, 284971463, 816924828, 990099617, 318375630, 584305975, 248573052, 489795299, 930639088, 726753547, 504980507, 248573052, 376286984, 284971463, 928009160, 284971463, 338612784, 377081120, 248573052, 857367656, 295529690, 284971463, 489764782, 418560186, 736712197, 391324527, 428652516, 489795299, 869288221, 248573052, 248573052, 260898601, 93825921, 284971463, 248573052, 248573052, 766796529, 489795299, 407488570, 284971463, 338612784, 418560186, 180879790, 145007081, 464410749, 990099617, 248573052, 489764782, 338612784, 284971463, 928009160, 391324527, 375563824, 40576042, 248573052, 284971463, 930639088, 489795299, 248573052, 561622474, 869288221, 284971463, 875294168, 284971463, 156837895, 248573052, 504980507, 489795299, 29113224, 284971463, 868382506, 248573052, 489001857, 990099617, 428652516, 726753547, 869288221, 290590256, 248573052, 284971463, 850141924, 145007081, 489764782, 248573052, 768068853, 284971463, 187345160, 808148146, 338612784, 248573052, 566226217, 284971463, 801606439, 284971463, 504980507, 418560186, 338612784, 603617600, 428652516, 284971463, 340523208, 504980507, 489764782, 391324527, 784237031, 284971463, 248573052, 489764782, 859041745, 284971463, 428652516, 284971463, 489001857, 418560186, 248573052, 990099617, 190832390, 489795299, 248573052, 591682235, 338612784, 857367656, 816356732, 284971463, 869288221, 248573052, 248573052, 489795299, 930639088, 796163001, 337677098, 418560186, 921001829, 284971463, 428652516, 284971463, 377002841, 489764782, 944434978, 284971463, 180045850, 726753547, 801756311, 504980507, 338612784, 284971463, 428652516, 489795299, 768068853, 418560186, 504980507, 284971463, 621730640, 284971463, 248573052, 785711563, 869288221, 175395716, 928009160, 284971463, 338612784, 248573052, 489764782, 726753547, 892013535, 284971463, 248573052, 585955946, 938768439, 284971463, 428652516, 990099617, 861615435, 248573052, 337677098, 284971463, 990112917, 489795299, 504980507, 248573052, 768068853, 391324527, 488238932, 284971463, 338612784, 590524748, 248573052, 489795299, 464410749, 857367656, 248573052, 248573052, 615568497, 284971463, 659757589, 145007081, 984652543, 489764782, 248573052, 990099617, 930639088, 284971463, 489764782, 418560186, 869288221, 284971463, 316896228, 231755871, 338612784, 248573052, 248573052, 284971463, 548686376, 990099617, 250354001, 248573052, 338612784, 489795299, 883854788, 284971463, 202198935, 418560186, 489764782, 857367656, 930639088, 284971463, 248573052, 377081120, 95143555, 726753547, 928009160, 284971463, 489001857, 713655896, 504980507, 284971463, 464410749, 489795299, 248573052, 418560186, 34689064, 990099617, 488238932, 284971463, 768068853, 248573052, 566226217, 489795299, 68649338, 284971463, 248573052, 337677098, 577600395, 284971463, 428652516, 990099617, 338612784, 871483055, 248573052, 391324527, 918781395, 284971463, 585665217, 248573052, 338612784, 284971463, 928009160, 489795299, 869288221, 504980507, 248573052, 145007081, 239289371, 726753547, 868382506, 418560186, 918318550, 489795299, 428652516, 284971463, 338612784, 248573052, 489764782, 990099617, 806560146, 391324527, 248573052, 489764782, 338612784, 284971463, 758259205, 857367656, 520197616, 418560186, 248573052, 726753547, 930639088, 807541628, 566226217, 248573052, 869288221, 284971463, 297797097, 284971463, 377002841, 248573052, 337677098, 489795299, 105539462, 145007081, 248573052, 414076701, 489001857, 284971463, 428652516, 284971463, 869288221, 180879790, 504980507, 284971463, 664233419, 284971463, 489764782, 248573052, 726766804, 358526761, 428652516, 489795299, 587896891, 418560186, 248573052, 284971463, 492693669, 284971463, 248573052, 248573052, 338612784, 556035130, 928009160, 260898601, 768068853, 248573052, 936338503, 284971463, 930639088, 284971463, 504980507, 697458893, 869288221, 284971463, 856544896, 284971463, 489001857, 504980507, 248573052, 284971463, 764560960, 489795299, 248573052, 868382506, 377002841, 726753547, 488238932, 391324527, 869288221, 418560186, 250354001, 807541628, 930639088, 284971463, 248573052, 248573052, 322482722, 284971463, 81123504, 284971463, 535644720, 489764782, 248573052, 284971463, 464410749, 990099617, 489764782, 403746906, 338612784, 145007081, 428652516, 489795299, 956498525, 566226217, 248573052, 284971463, 93825921, 857367656, 337677098, 504980507, 869288221, 489795299, 428652516, 284971463, 338612784, 418560186, 153930905, 284971463, 909829662, 726753547, 248573052, 489764782, 338612784, 990099617, 932715184, 284971463, 476032132, 248573052, 248573052, 391324527, 285697326, 489795299, 248573052, 418560186, 95143555, 284971463, 488238932, 474303307, 338612784, 248573052, 248573052, 488609897, 612852301, 284971463, 504980507, 248573052, 489001857, 284971463, 428652516, 284971463, 768068853, 496327138, 337677098, 284971463, 930639088, 391324527, 537505887, 248573052, 441362639, 284971463, 928009160, 489795299, 338612784, 337677098, 248573052, 990099617, 50091128, 284971463, 566226217, 418560186, 338612784, 489795299, 249025175, 284971463, 253276273, 944434978, 489764782, 284971463, 664233419, 990099617, 248573052, 801756311, 768068853, 284971463, 428652516, 726753547, 615568497, 418560186, 248573052, 284971463, 464410749, 489795299, 868382506, 504980507, 198225222, 284971463, 190606185, 284971463, 95143555, 248573052, 504980507, 489795299, 930639088, 284971463, 248573052, 418560186};
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.count(n, K, vector <int>(query, query+sizeof(query)/sizeof(int))); break;
			}
			/*case 5:
			{
				int n = ;
				int K = ;
				int query[] = ;
				int __expected[] = ;
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.count(n, K, vector <int>(query, query+sizeof(query)/sizeof(int))); break;
			}*/
			/*case 6:
			{
				int n = ;
				int K = ;
				int query[] = ;
				int __expected[] = ;
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.count(n, K, vector <int>(query, query+sizeof(query)/sizeof(int))); break;
			}*/
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		double _elapsed = (double)(clock()-_start)/CLOCKS_PER_SEC;
		if (_received == _expected)
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout << "           Expected: {";
			for (unsigned i = 0; i < _expected.size(); i++)
			{
				if (i) cout << ",";
				cout << " " << _expected[i];
			}
			cout << " }" << endl;
			cout << "           Received: {";
			for (unsigned i = 0; i < _received.size(); i++)
			{
				if (i) cout << ",";
				cout << " " << _received[i];
			}
			cout << " }" << endl;
		}
	}
}

// END CUT HERE
